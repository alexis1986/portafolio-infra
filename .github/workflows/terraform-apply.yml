name: 'Terraform Apply'

on:
  push:
    branches:
      - main
    paths:
      - '**.tf'
      - '.github/workflows/terraform-apply.yml'
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  TF_VERSION: '1.3.0'

jobs:
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment:
      name: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials for Spaces
        run: |
          mkdir -p ~/.aws
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id = ${{ secrets.SPACES_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
          EOF

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan \
            -var="do_token=${{ secrets.DO_TOKEN }}" \
            -var="ssh_key_id=${{ secrets.SSH_KEY_ID }}" \
            -var="region=${{ vars.TF_VAR_REGION || 'nyc3' }}" \
            -var="droplet_size=${{ vars.TF_VAR_DROPLET_SIZE || 's-1vcpu-1gb' }}" \
            -var="droplet_image=${{ vars.TF_VAR_DROPLET_IMAGE || 'ubuntu-24-04-x64' }}" \
            -var="droplet_name=${{ vars.TF_VAR_DROPLET_NAME || 'portafolio-droplet' }}"

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan

      - name: Terraform Output
        id: output
        run: terraform output -json

      - name: Comment with Apply Results
        uses: actions/github-script@v7
        if: always()
        continue-on-error: true
        env:
          APPLY_OUTPUT: "${{ steps.apply.outputs.stdout }}"
          TF_OUTPUT: "${{ steps.output.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const applyStatus = '${{ steps.apply.outcome }}' === 'success' ? '✅ Success' : '❌ Failed';
            
            const output = `### Terraform Apply ${applyStatus}
            
            **Commit:** ${{ github.sha }}
            **Actor:** @${{ github.actor }}
            **Workflow:** \`${{ github.workflow }}\`
            
            <details><summary>Apply Output</summary>
            
            \`\`\`terraform
            ${process.env.APPLY_OUTPUT}
            \`\`\`
            
            </details>
            
            <details><summary>Terraform Outputs</summary>
            
            \`\`\`json
            ${process.env.TF_OUTPUT}
            \`\`\`
            
            </details>`;

            try {
              // Si hay PRs asociados al commit, comentar en ellos
              const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha
              });

              if (prs.data.length > 0) {
                for (const pr of prs.data) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: output
                  });
                }
                console.log(`Commented on ${prs.data.length} PR(s)`);
              } else {
                console.log('No associated PRs found for this commit');
              }
            } catch (error) {
              console.log('Unable to comment on PR:', error.message);
            }
