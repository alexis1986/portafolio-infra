name: 'Terraform Apply'

on:
  push:
    branches:
      - main
    paths:
      - '**.tf'
      - '.github/workflows/terraform-apply.yml'
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  TF_VERSION: '1.3.0'

jobs:
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment:
      name: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials for Spaces
        run: |
          mkdir -p ~/.aws
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id = ${{ secrets.SPACES_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
          EOF

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Determine runner public IP
        id: ip
        run: echo "ip=$(curl -s https://ifconfig.me)" >> $GITHUB_OUTPUT

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan \
            -var="do_token=${{ secrets.DO_TOKEN }}" \
            -var="region=${{ vars.TF_VAR_REGION || 'nyc3' }}" \
            -var="cluster_name=${{ vars.TF_VAR_CLUSTER_NAME || 'portafolio-cluster' }}" \
            -var="kubernetes_version=${{ vars.TF_VAR_KUBERNETES_VERSION || '' }}" \
            -var="tags=${{ vars.TF_VAR_TAGS || '[\"portafolio\"]' }}" \
            -var="vpc_name=${{ vars.TF_VAR_VPC_NAME || 'portafolio-vpc' }}" \
            -var="vpc_cidr=${{ vars.TF_VAR_VPC_CIDR || '10.10.0.0/16' }}" \
            -var="node_pool_name=${{ vars.TF_VAR_NODE_POOL_NAME || 'portafolio-pool' }}" \
            -var="node_pool_size=${{ vars.TF_VAR_NODE_POOL_SIZE || 's-1vcpu-1gb' }}" \
            -var="node_pool_min_nodes=${{ vars.TF_VAR_NODE_POOL_MIN_NODES || 1 }}" \
            -var="node_pool_max_nodes=${{ vars.TF_VAR_NODE_POOL_MAX_NODES || 2 }}" \
            -var="authorized_sources=[\"${{ steps.ip.outputs.ip }}/32\"]"

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan

      - name: Terraform Output
        id: output
        run: terraform output -json

      - name: Export kubeconfig file
        run: |
          terraform output -raw kubeconfig > kubeconfig
          echo "KUBECONFIG_PATH=$PWD/kubeconfig" >> $GITHUB_ENV

      - name: Upload kubeconfig artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: kubeconfig

      - name: Addons - Terraform Init
        id: addons_init
        run: terraform init
        working-directory: addons

      - name: Addons - Terraform Plan
        id: addons_plan
        run: |
          terraform plan -no-color -out=addons-tfplan \
            -var="kubeconfig_file=${{ env.KUBECONFIG_PATH }}" \
            -var="do_token=${{ secrets.DO_TOKEN }}" \
            -var="domain_base=${{ vars.TF_VAR_DOMAIN_BASE || 'alexdevvv.com' }}" \
            -var="letsencrypt_email=${{ vars.TF_VAR_LETSENCRYPT_EMAIL || 'alexis.castellano@gmail.com' }}" \
            -var="letsencrypt_environment=${{ vars.TF_VAR_LETSENCRYPT_ENVIRONMENT || 'production' }}"
        working-directory: addons

      - name: Addons - Terraform Apply
        id: addons_apply
        run: terraform apply -auto-approve addons-tfplan
        working-directory: addons

      - name: Comment with Apply Results
        uses: actions/github-script@v7
        if: always()
        continue-on-error: true
        env:
          APPLY_OUTPUT: "${{ steps.apply.outputs.stdout }}"
          TF_OUTPUT: "${{ steps.output.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const applyStatus = '${{ steps.apply.outcome }}' === 'success' ? '✅ Success' : '❌ Failed';
            
            const output = `### Terraform Apply ${applyStatus}
            
            **Commit:** ${{ github.sha }}
            **Actor:** @${{ github.actor }}
            **Workflow:** \`${{ github.workflow }}\`
            
            <details><summary>Apply Output</summary>
            
            \`\`\`terraform
            ${process.env.APPLY_OUTPUT}
            \`\`\`
            
            </details>
            
            <details><summary>Terraform Outputs</summary>
            
            \`\`\`json
            ${process.env.TF_OUTPUT}
            \`\`\`
            
            </details>`;

            try {
              // Si hay PRs asociados al commit, comentar en ellos
              const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha
              });

              if (prs.data.length > 0) {
                for (const pr of prs.data) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: output
                  });
                }
                console.log(`Commented on ${prs.data.length} PR(s)`);
              } else {
                console.log('No associated PRs found for this commit');
              }
            } catch (error) {
              console.log('Unable to comment on PR:', error.message);
            }
